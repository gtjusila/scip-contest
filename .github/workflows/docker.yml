name: Build & push multi-arch image (macOS-arm64 + Linux-amd64)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  IMAGE: scipcontest/autotuner-contest          # <— change only the image name, everything else auto-updates

jobs:
  # ──────────────────────────────────────────────────────────────
  # 1️⃣  Build the arm64 layer natively on Apple-silicon macOS
  # ──────────────────────────────────────────────────────────────
  arm64:
    runs-on: macos-14                            # hosted M1/M2 runner
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - id: build
        uses: docker/build-push-action@v5
        with:
          # 👇  NEW — point Buildx at the folder that contains the code/Dockerfile
          context: ./competition-container/code
          #     ^-- this path is relative to the repo root
          #        If your Dockerfile lives *outside* that folder, add    file: ./competition-container/Dockerfile
          platforms: linux/arm64
          tags: ${{ env.IMAGE }}:arm64-temp
          push: true
          provenance: false

    outputs:
      digest: ${{ steps.build.outputs.digest }}

  # ──────────────────────────────────────────────────────────────
  # 2️⃣  Build the amd64 layer on an Ubuntu x64 runner
  # ──────────────────────────────────────────────────────────────
  amd64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - id: build
        uses: docker/build-push-action@v5
        with:
          context: ./competition-container/code   # 👈 same adjustment
          platforms: linux/amd64
          tags: ${{ env.IMAGE }}:amd64-temp
          push: true
          provenance: false

    outputs:
      digest: ${{ steps.build.outputs.digest }}

  # ──────────────────────────────────────────────────────────────
  # 3️⃣  Merge the two single-arch images into one multi-arch tag
  # ──────────────────────────────────────────────────────────────
  manifest:
    needs: [ arm64, amd64 ]
    runs-on: ubuntu-latest
    steps:
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create & push multi-arch manifest
        run: |
          docker buildx imagetools create \
            -t $IMAGE:v0.2 \
            -t $IMAGE:latest \
            $IMAGE@${{ needs.amd64.outputs.digest }} \
            $IMAGE@${{ needs.arm64.outputs.digest }}
