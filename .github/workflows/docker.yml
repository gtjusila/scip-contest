# -------------------------------------------------------------
#  Build & push scipcontest/autotuner-contest (amd64 + arm64)
#  Context lives in ./competition-container/code
# -------------------------------------------------------------
name: Build & push autotuner-contest image

on:
  push:
    branches: [ "main" ]        # build every push to main
  workflow_dispatch:            # and allow manual runs

env:
  IMAGE: scipcontest/autotuner-contest   # Docker Hub repo

jobs:
  # ────────────────────────────────────────────────────────────
  # 1️⃣  ARM64 layer — native Ubuntu ARM runner (fast, no QEMU)
  # ────────────────────────────────────────────────────────────
  arm64:
    runs-on: ubuntu-22.04-arm            # hosted ARM server
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3   # enables Buildx

      - uses: docker/login-action@v3          # Docker Hub auth
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - id: build
        name: Build & push arm64 layer
        uses: docker/build-push-action@v5
        with:
          context: ./competition-container/code     # ← your code folder
          # If the Dockerfile is outside that folder add:
          # file: ./competition-container/Dockerfile
          platforms: linux/arm64
          tags: ${{ env.IMAGE }}:arm64-temp         # temporary tag
          push: true
          provenance: false                         # exposes digest

    outputs:
      digest: ${{ steps.build.outputs.digest }}

  # ────────────────────────────────────────────────────────────
  # 2️⃣  AMD64 layer — standard Ubuntu x64 runner
  # ────────────────────────────────────────────────────────────
  amd64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - id: build
        name: Build & push amd64 layer
        uses: docker/build-push-action@v5
        with:
          context: ./competition-container/code
          platforms: linux/amd64
          tags: ${{ env.IMAGE }}:amd64-temp
          push: true
          provenance: false

    outputs:
      digest: ${{ steps.build.outputs.digest }}

  # ────────────────────────────────────────────────────────────
  # 3️⃣  Merge both layers into final v0.2 + latest tags
  # ────────────────────────────────────────────────────────────
  manifest:
    needs: [ arm64, amd64 ]
    runs-on: ubuntu-latest
    steps:
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create & push multi-arch manifest
        run: |
          docker buildx imagetools create \
            -t $IMAGE:v0.2 \
            -t $IMAGE:latest \
            $IMAGE@${{ needs.amd64.outputs.digest }} \
            $IMAGE@${{ needs.arm64.outputs.digest }}
